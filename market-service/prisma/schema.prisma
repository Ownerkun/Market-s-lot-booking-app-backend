generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Market {
  id        String @id @default(uuid())
  name      String
  location  String
  latitude  Float?
  longitude Float?
  ownerId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  tags      MarketTag[] @relation("MarketToMarketTag")
  lots      Lot[]
}

model MarketTag {
  id        String   @id @default(uuid())
  name      String   @unique
  markets   Market[] @relation("MarketToMarketTag")
  isSystem  Boolean  @default(false) // System tags can't be deleted

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lot {
  id          String @id @default(uuid())
  name        String
  details     String
  price       Float
  shape       Json    // Store polygon coordinates as JSON
  position    Json    // Store position (x, y) as JSON
  available Boolean  @default(true)
  market      Market  @relation(fields: [marketId], references: [id])
  marketId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings Booking[]
  availabilities LotAvailability[]
}

model LotAvailability {
  id        String   @id @default(uuid())
  date      DateTime
  available Boolean  @default(true)
  lot       Lot      @relation(fields: [lotId], references: [id])
  lotId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([lotId, date])
}

model Booking {
  id              String   @id @default(uuid())
  tenantId        String 
  lotId           String 
  status          BookingStatus @default(PENDING)
  startDate       DateTime
  endDate         DateTime
  isOneDay        Boolean  @default(false)
  rejectionReason String?
  isArchived      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  lot             Lot      @relation(fields: [lotId], references: [id])
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}
